Parfait, tu veux donc :  
- **Créer une API** avec **Node.js + Express + MySQL** pour **ajouter un client**  
- **Créer un formulaire Backend** (par exemple en **Express** aussi) qui **utilise cette API** pour envoyer les données du client.

Ok ! On va faire ça proprement.  
Je vais te donner deux parties :

---

### 1. **API Node.js Express + MySQL** — route POST `/api/clients`

D'abord installe ce qu'il faut :

```bash
npm init -y
npm install express mysql2 body-parser cors
```

Puis ton fichier principal `server.js` :

```javascript
// server.js
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Connexion MySQL
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '', // ton mot de passe MySQL
  database: 'testdb' // ton nom de base
});

db.connect((err) => {
  if (err) {
    console.error('Erreur connexion MySQL:', err);
    return;
  }
  console.log('Connecté à MySQL ✅');
});

// Route pour ajouter un client
app.post('/api/clients', (req, res) => {
  const { nom, email } = req.body;
  
  if (!nom || !email) {
    return res.status(400).json({ message: 'Nom et Email requis' });
  }

  const sql = 'INSERT INTO clients (nom, email) VALUES (?, ?)';
  db.query(sql, [nom, email], (err, result) => {
    if (err) {
      console.error('Erreur ajout client:', err);
      return res.status(500).json({ message: 'Erreur serveur' });
    }
    res.status(201).json({ message: 'Client ajouté avec succès', clientId: result.insertId });
  });
});

app.listen(PORT, () => {
  console.log(`Serveur Node.js lancé sur http://localhost:${PORT}`);
});
```

**Ta table MySQL** doit ressembler à :

```sql
CREATE TABLE clients (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);
```

---

### 2. **Formulaire Backend** (Express aussi) qui utilise l'API

Crée un autre fichier `formServer.js` pour faire le serveur qui sert le formulaire + l'envoi.

Installe :

```bash
npm install ejs axios
```

Et ton `formServer.js` :

```javascript
// formServer.js
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = 4000;

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));

// Vue moteur EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Formulaire GET
app.get('/', (req, res) => {
  res.render('form');
});

// Formulaire POST
app.post('/submit', async (req, res) => {
  const { nom, email } = req.body;

  try {
    const response = await axios.post('http://localhost:3000/api/clients', { nom, email });
    res.send('Client ajouté avec succès ! ✅');
  } catch (error) {
    console.error('Erreur envoi API:', error.message);
    res.status(500).send('Erreur lors de l\'ajout du client ❌');
  }
});

app.listen(PORT, () => {
  console.log(`Formulaire en ligne sur http://localhost:${PORT}`);
});
```

Puis crée un fichier `views/form.ejs` :

```html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Ajouter Client</title>
</head>
<body>
  <h1>Ajouter un Client</h1>
  <form action="/submit" method="POST">
    <label for="nom">Nom :</label><br>
    <input type="text" id="nom" name="nom" required><br><br>

    <label for="email">Email :</label><br>
    <input type="email" id="email" name="email" required><br><br>

    <button type="submit">Ajouter</button>
  </form>
</body>
</html>
```

---

### 🛠️ Résultat

- **http://localhost:4000/** → Formulaire
- **POST** vers **http://localhost:3000/api/clients** → Ajoute dans MySQL

---

Veux-tu que je te prépare aussi une **version API + formulaire dans un seul serveur** pour simplifier encore plus ? 🚀  
Ou peut-être aussi avec une **validation plus avancée** (express-validator) ?
